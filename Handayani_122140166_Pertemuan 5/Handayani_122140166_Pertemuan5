from abc import ABC, abstractmethod

# Abstract class for library items
class LibraryItem(ABC):
    def __init__(self, item_id, title, year):
        self._item_id = item_id  # Protected attribute
        self._title = title      # Protected attribute
        self._year = year        # Protected attribute
        self.__is_available = True  # Private attribute

    @property
    def is_available(self):
        return self.__is_available

    @is_available.setter
    def is_available(self, status):
        self.__is_available = status

    @abstractmethod
    def display_info(self):
        pass

# Subclass for books
class Book(LibraryItem):
    def __init__(self, item_id, title, author, year, isbn, genre):
        super().__init__(item_id, title, year)
        self._author = author
        self._isbn = isbn
        self._genre = genre

    def display_info(self):
        return f"Book: {self._title} by {self._author}, ISBN: {self._isbn}, Genre: {self._genre}, Year: {self._year}"

    def checkout(self):
        if self.is_available:
            self.is_available = False
            print(f"{self._title} has been checked out.")
        else:
            print(f"{self._title} is not available.")

    def return_item(self):
        self.is_available = True
        print(f"{self._title} has been returned.")

# Subclass for magazines
class Magazine(LibraryItem):
    def __init__(self, item_id, title, year, issue_number):
        super().__init__(item_id, title, year)
        self._issue_number = issue_number

    def display_info(self):
        return f"Magazine: {self._title}, Issue: {self._issue_number}, Year: {self._year}"

# Class for library management
class Library:
    def __init__(self, name):
        self._name = name
        self.__items = []  # Private attribute to store library items

    def add_item(self, item):
        self.__items.append(item)
        print(f"Item '{item._title}' added to the library.")

    def display_available_items(self):
        available_items = [item.display_info() for item in self.__items if item.is_available]
        print("Available items:")
        for info in available_items:
            print(info)
        return available_items

    def search_by_title(self, title):
        results = [item.display_info() for item in self.__items if title.lower() in item._title.lower()]
        print(f"Search results for '{title}':")
        for info in results:
            print(info)
        return results

    def search_by_id(self, item_id):
        for item in self.__items:
            if item._item_id == item_id:
                print(f"Item found: {item.display_info()}")
                return item
        print(f"No item found with ID: {item_id}")
        return None
    
if __name__ == "__main__":
    # Create a library
    my_library = Library("My Library")

    # Create some books and magazines
    book1 = Book(item_id=1, title="Python Programming", author="John Doe", year=2020, isbn="1234567890", genre="Education")
    book2 = Book(item_id=2, title="Data Science Handbook", author="Jane Smith", year=2021, isbn="0987654321", genre="Science")
    magazine1 = Magazine(item_id=3, title="Tech Monthly", year=2025, issue_number=45)

    # Add items to the library
    my_library.add_item(book1)
    my_library.add_item(book2)
    my_library.add_item(magazine1)

    # Display available items
    my_library.display_available_items()

    # Search for an item by title
    my_library.search_by_title("Python")

    # Checkout a book
    book1.checkout()

    # Try to checkout the same book again
    book1.checkout()

    # Return the book
    book1.return_item()

    # Display available items again
    my_library.display_available_items()