import json
from abc import ABC, abstractmethod

class LibraryItem(ABC):
    def __init__(self, item_id, title, year):
        self._item_id = item_id
        self.__title = title
        self._year = year
        self.__is_available = True

    @property
    def title(self):
        return self.__title

    @title.setter
    def title(self, new_title):
        if isinstance(new_title, str) and new_title.strip():
            self.__title = new_title.strip()
        else:
            raise ValueError("Title must be a non-empty string")

    @property
    def is_available(self):
        return self.__is_available

    @is_available.setter
    def is_available(self, status):
        self.__is_available = status

    @abstractmethod
    def display_info(self):
        pass

    @abstractmethod
    def get_id(self):
        return self._item_id

    def to_dict(self):
        return {
            'item_id': self._item_id,
            'title': self.__title,
            'year': self._year,
            'is_available': self.__is_available,
            'type': self.__class__.__name__
        }

class Book(LibraryItem):
    def __init__(self, item_id, title, author, year, isbn, genre):
        super().__init__(item_id, title, year)
        self._author = author
        self._isbn = isbn
        self._genre = genre

    def display_info(self):
        return f"Book: {self.title} by {self._author}, ISBN: {self._isbn}, Genre: {self._genre}, Year: {self._year}"

    def get_id(self):
        return self._item_id

    def to_dict(self):
        data = super().to_dict()
        data.update({
            'author': self._author,
            'isbn': self._isbn,
            'genre': self._genre
        })
        return data

class Library:
    def __init__(self, name):
        self._name = name
        self.__items = []
        self.load_data()

    def is_id_unique(self, item_id):
        return not any(item.get_id() == item_id for item in self.__items)

    def add_item(self, item):
        if not self.is_id_unique(item.get_id()):
            raise ValueError(f"Item with ID {item.get_id()} already exists")
        self.__items.append(item)
        print(f"Item '{item.title}' added to the library.")
        self.save_data()

    def remove_item(self, item_id):
        for item in self.__items:
            if item.get_id() == item_id:
                self.__items.remove(item)
                print(f"Item with ID {item_id} removed from the library.")
                self.save_data()
                return True
        print(f"No item found with ID: {item_id}")
        return False

    def save_data(self):
        data = {
            'name': self._name,
            'items': [item.to_dict() for item in self.__items]
        }
        with open('library_data.json', 'w') as f:
            json.dump(data, f, indent=4)

    def load_data(self):
        try:
            with open('library_data.json', 'r') as f:
                data = json.load(f)
                self._name = data['name']
                self.__items = []
                for item_data in data['items']:
                    if item_data['type'] == 'Book':
                        item = Book(
                            item_data['item_id'],
                            item_data['title'],
                            item_data['author'],
                            item_data['year'],
                            item_data['isbn'],
                            item_data['genre']
                        )
                        item.is_available = item_data['is_available']
                        self.__items.append(item)
                    # Add similar handling for Magazine class
        except FileNotFoundError:
            print("No saved data found. Starting with empty library.")

    def display_available_items(self):
        available_items = [item for item in self.__items if item.is_available]
        if not available_items:
            print("No items currently available in the library.")
            return
        
        print("\nAvailable Items:")
        print("-" * 50)
        for item in available_items:
            print(item.display_info())
        print("-" * 50)
        return available_items

    def search_by_title(self, title):
        matches = [item for item in self.__items if title.lower() in item.title.lower()]
        if not matches:
            print(f"No items found with title containing '{title}'")
            return []
        
        print("\nSearch Results:")
        print("-" * 50)
        for item in matches:
            print(item.display_info())
        print("-" * 50)
        return matches

    def search_by_id(self, item_id):
        for item in self.__items:
            if item.get_id() == item_id:
                print("\nItem Found:")
                print("-" * 50)
                print(item.display_info())
                print("-" * 50)
                return item
        print(f"No item found with ID: {item_id}")
        return None

def main_menu():
    library = Library("My Library")
    
    while True:
        print("\n=== Library Management System ===")
        print("1. Add Book")
        print("2. Display Available Items")
        print("3. Search by Title")
        print("4. Search by ID")
        print("5. Remove Item")
        print("6. Exit")
        
        choice = input("\nEnter your choice (1-6): ")
        
        if choice == '1':
            try:
                item_id = int(input("Enter item ID: "))
                title = input("Enter title: ")
                author = input("Enter author: ")
                year = int(input("Enter year: "))
                isbn = input("Enter ISBN: ")
                genre = input("Enter genre: ")
                
                book = Book(item_id, title, author, year, isbn, genre)
                library.add_item(book)
            except ValueError as e:
                print(f"Error: {e}")
        
        elif choice == '2':
            library.display_available_items()
        
        elif choice == '3':
            title = input("Enter title to search: ")
            library.search_by_title(title)
        
        elif choice == '4':
            try:
                item_id = int(input("Enter item ID to search: "))
                library.search_by_id(item_id)
            except ValueError:
                print("Invalid ID format. Please enter a number.")
        
        elif choice == '5':
            try:
                item_id = int(input("Enter item ID to remove: "))
                library.remove_item(item_id)
            except ValueError:
                print("Invalid ID format. Please enter a number.")
        
        elif choice == '6':
            print("Thank you for using the Library Management System!")
            break
        
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main_menu()